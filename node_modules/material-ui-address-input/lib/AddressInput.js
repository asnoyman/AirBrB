'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Collapse = require('@material-ui/core/Collapse');

var _Collapse2 = _interopRequireDefault(_Collapse);

var _FormControl = require('@material-ui/core/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _Grid = require('@material-ui/core/Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _Hidden = require('@material-ui/core/Hidden');

var _Hidden2 = _interopRequireDefault(_Hidden);

var _InputLabel = require('@material-ui/core/InputLabel');

var _InputLabel2 = _interopRequireDefault(_InputLabel);

var _MenuItem = require('@material-ui/core/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Select = require('@material-ui/core/Select');

var _Select2 = _interopRequireDefault(_Select);

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _worldCountries = require('world-countries');

var _worldCountries2 = _interopRequireDefault(_worldCountries);

var _styles = require('@material-ui/core/styles');

var _core = require('@material-ui/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = function styles(theme) {
  return {
    wrapper: {
      width: '100%'
    },
    leftIcon: {
      marginRight: theme.spacing.unit
    },
    buttonsBar: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'flex-end'
    }
  };
};

var AddressInput = function (_Component) {
  _inherits(AddressInput, _Component);

  function AddressInput(props) {
    _classCallCheck(this, AddressInput);

    var _this = _possibleConstructorReturn(this, (AddressInput.__proto__ || Object.getPrototypeOf(AddressInput)).call(this, props));

    _this.reset = function () {
      _this.setState({
        displayNewAddressForm: false,
        newAddressManual: !_this.props.addressResolver,
        houseNumber: '',
        addressLine1: '',
        addressLine2: '',
        city: '',
        region: '',
        zip: '',
        country: '',
        houseNameNumberError: false,
        addressLine1Error: false,
        cityError: false,
        regionError: false,
        zipError: false,
        countryError: false,
        houseNameNumberHelperText: '',
        addressLine1HelperText: '',
        cityHelperText: '',
        regionHelperText: '',
        zipHelperText: '',
        countryHelperText: ''
      });
    };

    _this.handleDisplayNewAddressForm = function () {
      _this.setState({
        displayNewAddressForm: true
      });
    };

    _this.handleHideNewAddressForm = function () {
      _this.reset();
      _this.setState({
        displayNewAddressForm: false
      });
    };

    _this.handleRequiredError = function (name, error) {
      var _this$setState;

      _this.setState((_this$setState = {}, _defineProperty(_this$setState, name + 'Error', error), _defineProperty(_this$setState, name + 'HelperText', error ? 'This field is required.' : ''), _this$setState));
    };

    _this.handleChange = function (name) {
      return function (event) {
        _this.setState(_defineProperty({}, name, event.target.value));
      };
    };

    _this.handleAddAddress = function () {
      _this.handleRequiredError('addressLine1', _this.state.addressLine1 === '');
      _this.handleRequiredError('city', _this.state.city === '');
      _this.handleRequiredError('region', _this.state.region === '');
      _this.handleRequiredError('zip', _this.state.zip === '');
      if (_this.props.displayCountry) {
        _this.handleRequiredError('country', _this.state.country === '');
      }
      if (_this.state.addressLine1 !== '' && _this.state.city !== '' && _this.state.region !== '' && _this.state.zip !== '' && (_this.props.displayCountry && _this.state.country !== '' || !_this.props.displayCountry)) {
        _this.setState({
          addressLine1Error: false,
          addressLine1HelperText: ''
        });
        var address = {
          addressLine1: _this.state.addressLine1,
          addressLine2: _this.state.addressLine2,
          city: _this.state.city,
          region: _this.state.region,
          zip: _this.state.zip,
          country: _this.state.country
        };
        _this.props.onAdd(address);
        _this.props.onChange(_this.props.value.length);
        _this.reset();
      }
    };

    _this.handleChangeAddress = function (event) {
      if (parseInt(event.target.value) === -1) {
        _this.handleDisplayNewAddressForm();
      } else {
        _this.props.onChange(event.target.value);
      }
    };

    _this.handleEnterAddressManually = function () {
      _this.setState({
        newAddressManual: true
      });
    };

    _this.handleFindAddress = function () {
      if (_this.props.addressResolver) {
        _this.props.addressResolver(_this.state.houseNumber, _this.state.zip, _this.state.country);
        _this.reset();
      }
    };

    _this.stringifyAddress = function (address) {
      var stringAddress = address.addressLine1;
      if (address.addressLine2) {
        stringAddress += ', ' + address.addressLine2;
      }
      if (address.city) {
        stringAddress += ', ' + address.city;
      }
      if (address.region) {
        stringAddress += ', ' + address.region;
      }
      stringAddress += ', ' + address.zip;
      if (address.country) {
        stringAddress += ', ' + address.country;
      }
      return stringAddress;
    };

    _this.state = {
      displayNewAddressForm: false,
      newAddressManual: !_this.props.addressResolver,
      houseNumber: '',
      addressLine1: '',
      addressLine2: '',
      city: '',
      region: '',
      zip: '',
      country: '',
      houseNameNumberError: false,
      addressLine1Error: false,
      cityError: false,
      regionError: false,
      zipError: false,
      countryError: false,
      houseNameNumberHelperText: false,
      addressLine1HelperText: '',
      cityHelperText: '',
      regionHelperText: '',
      zipHelperText: '',
      countryHelperText: ''
    };
    return _this;
  }

  _createClass(AddressInput, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var classes = this.props.classes;

      return _react2.default.createElement(
        'div',
        { className: classes.wrapper },
        _react2.default.createElement(
          _Collapse2.default,
          { 'in': !this.state.displayNewAddressForm },
          _react2.default.createElement(
            _FormControl2.default,
            {
              disabled: this.props.disabled,
              error: this.props.error,
              fullWidth: true,
              margin: this.props.margin,
              required: this.props.required
            },
            _react2.default.createElement(
              _InputLabel2.default,
              { htmlFor: this.props.id },
              this.props.label
            ),
            _react2.default.createElement(
              _Select2.default,
              {
                inputProps: {
                  id: this.props.id,
                  name: this.props.name
                },
                native: this.props.native,
                onBlur: this.props.onBlur,
                onChange: this.handleChangeAddress,
                value: this.props.value
              },
              this.props.native ? _react2.default.createElement('option', { value: '' }) : _react2.default.createElement(
                _MenuItem2.default,
                { value: '' },
                'Choose an address...'
              ),
              this.props.allAddresses.map(function (address, index) {
                return _this2.props.native ? _react2.default.createElement(
                  'option',
                  { key: index, value: address.id || index },
                  _this2.stringifyAddress(address)
                ) : _react2.default.createElement(
                  _MenuItem2.default,
                  { key: index, value: address.id || index },
                  _this2.stringifyAddress(address)
                );
              }),
              this.props.native ? _react2.default.createElement(
                'option',
                { value: -1 },
                'Add new address...'
              ) : _react2.default.createElement(
                _MenuItem2.default,
                { value: -1 },
                _react2.default.createElement(
                  'strong',
                  null,
                  'Add new address...'
                )
              )
            ),
            this.props.helperText ? _react2.default.createElement(
              _core.FormHelperText,
              null,
              this.props.helperText
            ) : null
          )
        ),
        _react2.default.createElement(
          _Collapse2.default,
          { 'in': this.state.displayNewAddressForm },
          _react2.default.createElement(
            _Collapse2.default,
            { 'in': this.state.newAddressManual },
            _react2.default.createElement(_TextField2.default, {
              helperText: this.state.addressLine1HelperText,
              error: this.state.addressLine1Error,
              label: this.props.addressLabels.addressLine1 + ' *',
              value: this.state.addressLine1,
              onChange: this.handleChange('addressLine1'),
              fullWidth: true,
              margin: this.props.margin
            }),
            _react2.default.createElement(_TextField2.default, {
              label: this.props.addressLabels.addressLine2,
              value: this.state.addressLine2,
              onChange: this.handleChange('addressLine2'),
              fullWidth: true,
              margin: this.props.margin
            }),
            _react2.default.createElement(_TextField2.default, {
              helperText: this.state.cityHelperText,
              error: this.state.cityError,
              label: this.props.addressLabels.city + ' *',
              value: this.state.city,
              onChange: this.handleChange('city'),
              fullWidth: true,
              margin: this.props.margin
            }),
            _react2.default.createElement(
              _Grid2.default,
              { container: true, spacing: 8 },
              _react2.default.createElement(
                _Grid2.default,
                { item: true, xs: 6 },
                _react2.default.createElement(_TextField2.default, {
                  helperText: this.state.regionHelperText,
                  error: this.state.regionError,
                  label: this.props.addressLabels.region + ' *',
                  value: this.state.region,
                  onChange: this.handleChange('region'),
                  fullWidth: true,
                  margin: this.props.margin
                })
              ),
              _react2.default.createElement(
                _Grid2.default,
                { item: true, xs: 6 },
                _react2.default.createElement(_TextField2.default, {
                  helperText: this.state.zipHelperText,
                  error: this.state.zipError,
                  label: this.props.addressLabels.zip + ' *',
                  value: this.state.zip,
                  onChange: this.handleChange('zip'),
                  fullWidth: true,
                  margin: this.props.margin
                })
              )
            )
          ),
          _react2.default.createElement(
            _Collapse2.default,
            { 'in': !this.state.newAddressManual },
            _react2.default.createElement(
              _Grid2.default,
              { container: true, spacing: 8 },
              _react2.default.createElement(
                _Grid2.default,
                { item: true, xs: 6 },
                _react2.default.createElement(_TextField2.default, {
                  helperText: this.state.houseNameNumberHelperText,
                  error: this.state.houseNameNumberError,
                  label: this.props.addressLabels.houseNameNumber + ' *',
                  value: this.state.houseNumber,
                  onChange: this.handleChange('houseNumber'),
                  fullWidth: true,
                  margin: this.props.margin
                })
              ),
              _react2.default.createElement(
                _Grid2.default,
                { item: true, xs: 6 },
                _react2.default.createElement(_TextField2.default, {
                  helperText: this.state.zipHelperText,
                  error: this.state.zipError,
                  label: this.props.addressLabels.zip + ' *',
                  value: this.state.zip,
                  onChange: this.handleChange('zip'),
                  fullWidth: true,
                  margin: this.props.margin
                })
              )
            )
          ),
          this.props.displayCountry ? _react2.default.createElement(
            _FormControl2.default,
            {
              fullWidth: true,
              margin: this.props.margin,
              error: this.state.countryError
            },
            _react2.default.createElement(
              _InputLabel2.default,
              null,
              this.props.addressLabels.country + ' *'
            ),
            _react2.default.createElement(
              _Select2.default,
              {
                native: this.props.native,
                value: this.state.country,
                onChange: this.handleChange('country')
              },
              this.props.native ? _react2.default.createElement('option', { value: '' }) : null,
              _worldCountries2.default.sort(function (a, b) {
                return a.name.common.localeCompare(b.name.common);
              }).map(function (country, index) {
                return _this2.props.native ? _react2.default.createElement(
                  'option',
                  { key: index, value: country.name.common },
                  country.name.common
                ) : _react2.default.createElement(
                  _MenuItem2.default,
                  { key: index, value: country.name.common },
                  country.name.common
                );
              })
            ),
            _react2.default.createElement(
              _core.FormHelperText,
              null,
              this.state.countryHelperText
            )
          ) : null,
          _react2.default.createElement(
            'div',
            { className: classes.buttonsBar },
            _react2.default.createElement(
              _Button2.default,
              {
                color: 'default',
                onClick: this.handleHideNewAddressForm
              },
              'Cancel'
            ),
            _react2.default.createElement(
              _Hidden2.default,
              { xsUp: !this.state.newAddressManual },
              _react2.default.createElement(
                _Button2.default,
                {
                  color: 'primary',
                  onClick: this.handleAddAddress
                },
                'Add Address'
              )
            ),
            _react2.default.createElement(
              _Hidden2.default,
              { xsUp: this.state.newAddressManual },
              _react2.default.createElement(
                _Button2.default,
                {
                  color: 'default',
                  onClick: this.handleEnterAddressManually
                },
                'Enter Address Manually'
              ),
              _react2.default.createElement(
                _Button2.default,
                {
                  color: 'primary',
                  onClick: this.handleFindAddress
                },
                'Find Address'
              )
            )
          )
        )
      );
    }
  }]);

  return AddressInput;
}(_react.Component);

AddressInput.defaultProps = {
  addressLabels: {
    houseNameNumber: 'House Name/Number',
    addressLine1: 'Address Line 1',
    addressLine2: 'Address Line 2',
    city: 'City',
    region: 'State/Province/Region',
    zip: 'ZIP/Postal Code',
    country: 'Country'
  },
  disabled: false,
  displayCountry: true,
  id: 'address',
  label: 'Address',
  margin: 'none',
  name: 'address',
  native: false,
  required: false
};

AddressInput.propTypes = {
  addressLabels: _propTypes2.default.shape({
    houseNameNumber: _propTypes2.default.string.isRequired,
    addressLine1: _propTypes2.default.string.isRequired,
    addressLine2: _propTypes2.default.string.isRequired,
    city: _propTypes2.default.string.isRequired,
    region: _propTypes2.default.string.isRequired,
    zip: _propTypes2.default.string.isRequired,
    country: _propTypes2.default.string.isRequired
  }),
  addressResolver: _propTypes2.default.func,
  allAddresses: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    addressLine1: _propTypes2.default.string.isRequired,
    addressLine2: _propTypes2.default.string,
    city: _propTypes2.default.string,
    region: _propTypes2.default.string,
    zip: _propTypes2.default.string.isRequired,
    country: _propTypes2.default.string
  })).isRequired,
  classes: _propTypes2.default.object.isRequired,
  disabled: _propTypes2.default.bool,
  displayCountry: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  helperText: _propTypes2.default.node,
  id: _propTypes2.default.string,
  label: _propTypes2.default.string,
  margin: _propTypes2.default.oneOf(['none', 'dense', 'normal']),
  name: _propTypes2.default.string,
  native: _propTypes2.default.bool,
  onAdd: _propTypes2.default.func.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  required: _propTypes2.default.bool,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

exports.default = (0, _styles.withStyles)(styles, { withTheme: true })(AddressInput);